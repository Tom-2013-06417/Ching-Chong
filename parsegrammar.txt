Start' -> Start
Start -> HiIam Name . \n GlobVarDec FuncDec

GlobVarDec -> ISendShrimp: \n { VD } Sincerely , Name . \n
GlobVarDec -> ''

FuncDec -> FuncDec' FuncDec
FuncDec -> ''
FuncDec' -> Dear Name , \n ParamDecFunc VDF { S } Sincerely , Name . \n
FuncDec' -> ''

ParamDecFunc -> IWantDumplings: \n { VD } okay lah. \n
ParamDecFunc -> ''

S -> S' S
S -> ''

S' -> IGiveYouSum V lah. \n

S' -> IWriteTo Name Sfuncall lah. \n Sreturn
Sfuncall -> with V Sfuncall'
Sfuncall -> ''
Sfuncall' -> Sfuncall'' Sfuncall'
Sfuncall' -> ''
Sfuncall'' -> , V Sfuncall'
Sfuncall'' -> ''
Sreturn -> IGet V from Name lah. \n
Sreturn -> ''

S' -> FSurpQuiz: Math lah. \n
S' -> FSurpLongQuiz: \n Math { Math } INoPass lah. \n

S' -> FatherAsk Label , if Conditional lah. \n S { S } IdoubleC Label , lah. \n elif else
elif ->	FatherAskA Label , if Conditional lah. \n S { S } IdoubleC Label , lah. \n elif
elif -> ''
else -> FatherAsk Label , NoMore lah. \n S { S } FatherAshamedofSon Label , lah. \n
else -> ''

S' -> IShowFather V lah. \n

S' -> IGiveFather V lah. \n
Sout -> FatherWants V , 
Sout -> ''

S' -> FatherSayMakeRepeat Label again lah. \n Sloop I'mDoneWithChore lah. \n
Sloop -> For
Sloop -> While

S' -> I'mTired lah. \n

S' -> FatherBroughtOutBelt lah. \n

S' -> ''

For -> 	MustDo V from LoopValue to LoopValue oclock lah. \n S { S }
While -> MustDo V while Conditional \n S { S }

VDF -> FatherSaysThatINeed: \n { VD } Sincerely , Name .
VD -> DT-declare lah. \n

DT-declare -> Score V [ of int] { , V [ of int ] }
DT-declare -> GWA V [ of float]  { , V [ of float ] }
DT-declare -> LetterGrade V [ of ( BL | SL ) ]  { , V [ of ( BL | SL ) ] }
DT-declare -> Honor V [ of ( own | disown )]  { , V [ of ( own | disown ) ] }
DT-declare -> Essay V [ of Pang-string-lel ]  { , V [ of Pang-string-lel ] }

V -> BL { Str }
V -> ''

LoopValue -> int
LoopValue -> V

Str-> ( BL | SL | int ) { BL | SL | int }
Str -> BL Str'
Str -> SL Str'
Str -> intt

BL -> A | B | ... | Z
SL -> a | b | ... | z

int -> 0 int | .... | 9 int
int -> ''

Label -> V

float ->  int . int

Name -> BL { BL | SL }

Math -> term
Math -> Math + term
Math -> Math - term
term -> factor
term -> term * factor
term -> term / factor
factor -> exp
factor -> factor ** exp
exp -> V
exp -> ( Math )











********************
<term> -> <factor> { (* | /) <factor> }
<factor> -> <expo> { ** <expo> }
<expo> -> <V> | ( <V> )
VDF -> FatherSaysINeed: "\n" { VD } Sincerely "," Name "," "."
VD -> DT VDs { "," VDs } "lah." "\n"
VDs -> 	V [ "of" Value ]
DT -> "Score" | "GWA" | "LetterGrade" | "Honor" | "Essay"
V -> 	variable
Label -> 	all capssssss
Value -> 	alam niyo na to
Name 	-> 	program name
Math  -> 	yung mga plus and shit
Conditional -> yung comparisons and stuff